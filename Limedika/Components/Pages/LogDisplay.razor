@page "/logs"

@using Limedika.Models
@using Limedika.Services.Interfaces
@inject ILogService LogService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h3 class="my-4">Log Entries (LAST 1000)</h3>

@if (logs == null)
{
    <p><em>Loading...</em></p>
}
else if (!logs.Any())
{
    <p>No log entries available.</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="DownloadLogs">Download 8MB Log</button>

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Timestamp</th>
                <th>Action</th>
                <th>Entity Name</th>
                <th>Entity ID</th>
                <th>Field Name</th>
                <th>Old Value</th>
                <th>New Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in logs)
            {
                <tr>
                    <td>@log.Timestamp</td>
                    <td>@log.Action</td>
                    <td>@log.EntityName</td>
                    <td>@log.EntityId</td>
                    <td>@log.FieldName</td>
                    <td>@log.OldValue</td>
                    <td>@log.NewValue</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<LogEntry> logs;
    private const int MaxLogSizeInBytes = 8 * 1024 * 1024; // 32 MB

    protected override async Task OnInitializedAsync()
    {
        await LoadLogsAsync();
    }

    private async Task LoadLogsAsync()
    {
        logs = await LogService.GetLogsAsync();
    }

    private async Task DownloadLogs()
    {
        //Implement Download
    }
}
